{"version":3,"sources":["pages/Auth.js","pages/survey.js","pages/verification.js","pages/verificationRoute.js","App.js","reportWebVitals.js","index.js"],"names":["useAuth","isAuthenticated","completed","callBack","Survey","useForm","register","handleSubmit","watch","setValue","formState","useState","setResult","none","setNone","professor","setProfessor","student","setStudent","staff","setStaff","captcha","setCaptcha","navigate","useNavigate","onSubmit","data","a","JSON","stringify","useFormPersist","className","Container","Form","Row","Group","as","Col","controlId","Label","Control","type","maxLength","pattern","required","errors","firstname","lastname","Check","label","checked","onChange","minLength","feet","inches","phone","zipcode","name","id","for","href","sitekey","size","Button","variant","disabled","Verification","parse","sessionStorage","getItem","fullName","address","city","state","height","Geocode","setApiKey","lat","lng","location","setLocation","fromAddress","then","response","results","geometry","error","console","title","email","googleMapsApiKey","mapContainerStyle","width","center","zoom","onLoad","marker","log","position","VerificationRoute","children","useLocation","to","from","App","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","rel","document","getElementById"],"mappings":"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","file":"static/js/main.aa750831.chunk.js","sourcesContent":["/**\n * Fake authetication to check whether the user has completed the survey or not \n */\nexport const useAuth = {\n  isAuthenticated: false,\n  completed(callBack) {\n    useAuth.isAuthenticated = true\n    callBack()\n  },\n};\n","import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { Button, Form, Container, Row, Col} from 'react-bootstrap';\nimport useFormPersist from 'react-hook-form-persist';\nimport { useNavigate } from \"react-router-dom\";\nimport { useAuth } from './Auth';\nimport ReCAPTCHA from 'react-google-recaptcha';\n\nimport './survey.css';\n\n//   const { step, firstName, lastName, email, address, city, state, zip } = this.state;\n//   const inputValues = { firstName, lastName, email, address, city, state, zip };\n\nexport default function Survey() {\n  const { register, handleSubmit, watch,setValue,formState} = useForm();\n  const [result, setResult] = useState(\"\");\n  const [none, setNone] = useState(true);\n  const [professor, setProfessor] = useState(false);\n  const [student, setStudent] = useState(false);\n  const [staff, setStaff] = useState(false);\n\n  const [captcha, setCaptcha] = useState(false);\n  let navigate = useNavigate();\n\n  const onSubmit = async (data) =>    \n  {\n    useAuth.completed(() => {\n        setResult(JSON.stringify(data));\n        navigate('/verification');\n    });\n  };\n\n  function onChange() {\n    setCaptcha(true);\n    //console.log(\"Captcha value:\", value);\n  }\n\n  function onProffesorChange(){\n    setProfessor(true);\n    setStudent(false);\n    setStaff(false);\n    setNone(false);\n  }\n  function onStudentChange(){\n    setStudent(true);\n    setProfessor(false);\n    setStaff(false);\n    setNone(false);\n  }\n  function onStaffChange(){\n    setStaff(true);\n    setProfessor(false);\n    setStudent(false);\n    setNone(false);\n  }\n  function onNoneChange(){\n    setNone(true);\n    setProfessor(false);\n    setStudent(false);\n    setStaff(false);\n  }\n\n  useFormPersist('Form',{watch,setValue});\n\n  return (\n    <div className=\"div-form\">\n    <h2>CSC 642 848 Fall 2021 Individual Assignment Alfonso Duarte-Sarabia</h2>\n    <h3>Data Survey Form</h3>\n    <br></br>   \n    <Container className='Container'>\n    <Form onSubmit={handleSubmit(onSubmit)} className=\"form\">\n        <Row>\n            <Form.Group as={Col} controlId=\"formFirstName\" className='mb-4'>\n                <Form.Label className=\"firstname\">First Name</Form.Label>\n                <Form.Control\n                type=\"text\"\n                {...register(\"firstname\", {maxLength: 40, pattern: /^[A-Za-z]+$/i}) }\n                required\n                />\n                {formState.errors.firstname && <p className=\"errors\">Please provide a correct name.</p>}\n            </Form.Group>\n\n            <Form.Group as={Col} controlId=\"formLastName\" className='mb-4'>\n                <Form.Label className=\"lastname\">Last Name</Form.Label>\n                <Form.Control\n                type=\"text\"\n                {...register(\"lastname\", {maxLength: 40, pattern: /^[A-Za-z]+$/i}) }\n                required\n                />\n                {formState.errors.lastname && <p className=\"errors\">Please provide a correct name.</p>}\n            </Form.Group>\n        </Row>\n\n        <Form.Label className=\"title\">Choose Title</Form.Label>\n        <Form.Group as={Col} className=\"mb-4\">\n                <Form.Check\n                    type='checkbox'\n                    label='None'\n                    checked={none}\n                    onChange={onNoneChange}\n                >\n                </Form.Check>\n\n                <Form.Check\n                    type='checkbox'\n                    label='Professor'\n                    checked={professor}\n                    onChange={onProffesorChange}\n                >\n                </Form.Check>\n                <Form.Check\n                    type='checkbox'\n                    label='Student'\n                    checked={student}\n                    onChange={onStudentChange}\n                >\n                </Form.Check>\n\n                <Form.Check\n                    type='checkbox'\n                    label='Staff'\n                    checked={staff}\n                    onChange={onStaffChange}\n                >\n                </Form.Check>\n            </Form.Group>\n\n            <Form.Label className=\"height\">Height</Form.Label>\n        <Row>\n            <Form.Group as={Col} className=\"mb-4\">\n                <Form.Label className=\"feet\">Feet</Form.Label>\n                <Form.Control\n                    type=\"text\"\n                    {...register(\"feet\", {maxLength: 2,minLength: 1, pattern: /^[0-9]+$/i}) }\n                />\n                {formState.errors.feet && <p className=\"errors\">Plase provide a valid height.</p>}\n            </Form.Group>\n\n            <Form.Group as={Col} className=\"mb-4\">\n                <Form.Label className=\"inches\">Inches</Form.Label>\n                <Form.Control\n                    type=\"text\"\n                    {...register(\"inches\", {maxLength: 4,minLength: 1, pattern: /^[0-9]+$/i}) }\n                />\n                {formState.errors.inches && <p className=\"errors\">Plase provide a valid height.</p>}\n            </Form.Group>\n        </Row>\n\n        <Form.Group className=\"mb-4\">\n            <Form.Label className=\"phone\">Phone Number</Form.Label>\n            <Form.Control\n                type=\"text\"\n                {...register(\"phone\", {maxLength: 10,minLength: 10, pattern: /^[0-9]+$/i}) }\n            />\n            {formState.errors.phone && <p className=\"errors\">Plase provide a valid phone number.</p>}\n        </Form.Group>\n\n        <Row>\n        <Form.Group as={Col} className=\"mb-3\" controlId=\"formAddress\">\n            <Form.Label className=\"address\">Address</Form.Label>\n            <Form.Control type=\"text\" {...register(\"address\")} required className=\"address\"></Form.Control>\n        </Form.Group>      \n\n        <Form.Group as={Col} className=\"mb-2\" controlId=\"formCity\">\n            <Form.Label className=\"city\">City</Form.Label>\n            <Form.Control type=\"text\" {...register(\"city\")} required></Form.Control>\n        </Form.Group>  \n\n        <Form.Group as={Col} className=\"mb-2\" controlId=\"formState\">\n            <Form.Label className=\"state\">State</Form.Label>\n            <Form.Control type=\"text\" {...register(\"state\")} required></Form.Control>\n        </Form.Group>    \n        \n        <Form.Group as={Col} className=\"mb-2\" controlId=\"formZipCode\">\n            <Form.Label className=\"zipcode\">Zip Code</Form.Label>\n            <Form.Control type=\"text\" \n            {...register(\"zipcode\", {maxLength:5,minLength:4, pattern: /^[0-9]+$/i})} required></Form.Control>\n            {formState.errors.zipcode && <p className=\"errors\">Please provide a valid zip.</p>}\n        </Form.Group>\n        </Row>\n\n        \n        <Row>\n        <Form.Group as={Col} className=\"mb-4\">\n        <Form.Label className=\"title\">Choose Services You Require</Form.Label>\n                <Form.Check\n                    type='checkbox'\n                    label='Email'\n                >\n                </Form.Check>\n\n                <Form.Check\n                    type='checkbox'\n                    label='Phone'\n                >\n                </Form.Check>\n                <Form.Check\n                    type='checkbox'\n                    label='Facebook'\n                >\n                </Form.Check>\n\n                <Form.Check\n                    type='checkbox'\n                    label='Twitter'\n                >\n                </Form.Check>\n\n                <Form.Check\n                    type='checkbox'\n                    label='Surface Email'\n                >\n                </Form.Check>\n\n                <Form.Check\n                    type='checkbox'\n                    label='Personal Visit'\n                >\n                </Form.Check>\n            </Form.Group>\n\n        <Form.Group as={Col} className=\"mb-4\">\n        <Form.Label className=\"title\">Monthly Budget for Services</Form.Label>\n                <Form.Check\n                    type='checkbox'\n                    label='Less than $50'\n                >\n                </Form.Check>\n\n                <Form.Check\n                    type='checkbox'\n                    label='Between $50 and $100'\n                >\n                </Form.Check>\n                \n                <Form.Check\n                    type='checkbox'\n                    label='Above $100'\n                >\n                </Form.Check>\n            </Form.Group>\n        </Row>\n\n            <Form.Group as={Col} controlId=\"formEmail\"  className=\"email\">\n                <Form.Label className=\"email\">Email Address</Form.Label>\n                <Form.Control\n                className=\"email-form\"\n                type=\"email\"\n                name=\"email\"\n                {...register(\"email\", {pattern: /^\\S+@\\S+$/i})}\n                required\n                />\n            </Form.Group>\n\n        {/* <Form.Group className=\"mb-4\">\n            <Form.Check \n                type=\"checkbox\"\n                required='true'\n                label='I agree to'\n            />\n            <a href=\"/\">Terms and Conditions</a>\n        </Form.Group>    */}\n\n        <div className=\"tacbox\">\n        <input id=\"checkbox\" type=\"checkbox\"  required/>\n        <label for=\"checkbox\"> I agree to these <a href=\"/\">Terms and Conditions</a>.</label>\n        </div>\n\n        <ReCAPTCHA \n        sitekey='6LfA-modAAAAAFgzH3RrMtomnEAcQ_Inpgy5A871' \n        size='normal'\n        onChange={onChange}\n        className='captcha'\n        />\n        <div  className='submit-button'>\n        <Button variant=\"primary\" type=\"submit\" disabled={!captcha}>Submit</Button>\n        </div>\n    </Form>\n    {/* <p>{result}</p> */}\n    </Container>\n    </div>\n  );\n}","import { useState } from \"react\";\nimport Geocode from 'react-geocode';\nimport { GoogleMap, LoadScript, Marker } from '@react-google-maps/api'; \n// import { Container } from \"react-bootstrap\";\n//mport { GoogleMap ,withScriptjs, withGoogleMap } from 'react-google-maps';\n//import { Wrapper, Status } from \"@googlemaps/react-wrapper\";\n\nimport './verification.css';\n\nexport default function Verification(){\n    let data = JSON.parse(sessionStorage.getItem('Form'));\n    const fullName = data.firstname + ' ' + data.lastname;\n    const address = data.address + ' ' + data.city + ', '  + data.state + ' ' + data.zipcode;\n    const height = data.feet + 'ft ' + data.inches + 'in';\n\n    Geocode.setApiKey('AIzaSyBNZdfrybA4otLM4lnkOE_rVkVcRcSEE2E');\n    //let latitude; let longitude; \n    const [location,setLocation] = useState({\n        lat: null,\n        lng: null,\n    });\n\n    const containerStyle = {\n        width: '400px',\n        height: '400px'\n      };    \n\n    //Get latitude & longitude from address.\n    Geocode.fromAddress(address).then(\n        (response) => {\n        const { lat, lng } = response.results[0].geometry.location;\n        setLocation({lat,lng});\n        },\n        (error) => {\n        console.error(error);\n        }\n    );\n\n    const onLoad = marker => {\n        console.log('marker: ', marker)\n      }      \n    \n    return(\n        <div>\n            <h2>Results verification page Alfonso Duarte-Sarabia</h2><br/><br/>\n            <div  className='verification-container'>\n                <h3>{fullName}</h3>\n                <h2>{data.title}</h2>\n                <h2>{height}</h2>\n                <h3>{data.phone}</h3>\n                <h3>{data.email}</h3>\n                <h2>{address}</h2>\n                <div className='maps'>\n                <LoadScript googleMapsApiKey='AIzaSyBNZdfrybA4otLM4lnkOE_rVkVcRcSEE2E'>\n                    <GoogleMap\n                        mapContainerStyle={containerStyle}\n                        center={location}\n                        zoom={10}\n                    >\n                        <Marker\n                            onLoad={onLoad}\n                            position={location}\n                        />\n                    </GoogleMap>\n                </LoadScript>\n                </div>\n            </div>\n        </div>\n    );\n}","import React from 'react';\nimport { Navigate, useLocation } from 'react-router-dom';\nimport { useAuth } from \"./Auth\";\n\nexport default function VerificationRoute({children}){\n    let location = useLocation();\n    return useAuth.isAuthenticated ? (children) : (<Navigate to='/' state={{from: location}} />);\n}","import './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport { HashRouter,Routes, Route } from 'react-router-dom';\n// import Home from './pages/home';\nimport Survey from './pages/survey';\nimport Verification from './pages/verification';\nimport VerificationRoute from './pages/verificationRoute';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* <Home>\n      </Home> */}\n        <HashRouter>\n          <Routes>\n            <Route path='/' element={<Survey/>} />\n            <Route path='verification/*' element={\n              <VerificationRoute>\n                <Verification/>\n              </VerificationRoute>\n            } />\n          </Routes>\n        </HashRouter>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'mdb-react-ui-kit/dist/css/mdb.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <link href=\"https://use.fontawesome.com/releases/v5.15.1/css/all.css\" rel=\"stylesheet\" />\n    <link href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap\" rel=\"stylesheet\" />\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}